#include <string> 
#include <vector> 
#include <sstream> 
#include <iostream> 
#include <utility> 
#include <algorithm>
using namespace std;
/*
TODO:
Терминология:
В условиях задач используется следующая терминология:
 Текст – произвольная последовательность символов.
 Разделитель – символ пробела.
 Слово – последовательность символов, не содержащая разделителей.
 Серия – последовательность, состоящая из совпадающих элементов.
 Предложение – последовательность слов, разделенных одним разделителем.
 Подстрока – часть строки, обладающая указанными свойствами.
 Вхождение (символа или подстроки) – наличие символа или подстроки в строке.

При решении задачи следует:
1) обеспечить ввод с клавиатуры исходного текста, строки или последовательности
символов, которые должны присваиваться в качестве значения символьного массива;
2) исключить использование встроенных подпрограмм, предназначенные для работы со
строками, за исключением подпрограммы strlen, которая определяет текущую длину строки;
3) для проверки работоспособности программы необходимо разработать и выполнить
соответствующие тесты, которые предъявляются при сдаче задания;
4) при оформлении текста программы обязательно использование отступов.


Характеристикой слова назовем длину содержащейся в нем максимальной серии.
Упорядочить слова заданного предложения в соответствии с ростом их характеристик.
*/


/*
string* split(string c) //функция для разделения строки на массивы, которая принимает одно значение и возвращает два 
{
	string word;//Будет содержать текущее слово из текста 
	stringstream ss(c);//Инициализация строкового потока 
	vector <string> array;//Вектор, каждый элемент которого слово из текста 
	while (ss >> word) //пока действует поток 
		array.push_back(word); //вставляем элементы word в массив array 
	return array[1]; // возвращаем 2 значения в main (Длина массива, элементы массива)
}
*/
string* split(string c) //функция для разделения строки на массивы, которая принимает одно значение и возвращает два 
{
	string word = "";
	int i = 0;
	int j = 1;
	int length = c.length();
	string arr[50];
	unsigned int arr_length = 0;

	for (i = 0; i <= length; i++) {
		if (c[i] != ' ' && i != length) {
			word = word + c[i];
		}
		else {
			array[] ;
			word = "";
			j++;
		}
	}
	return array;
}

int character(string word) {
	int i = 0;
	int n = 1;
	int max = 0;
	string tx = word; //слово
	char simbolsuka = tx[0];
	int length = tx.length(); //Длина слова
	for (i = 1; i <= length; i++)
		if (tx[i] == simbolsuka) {
			n++;
		}
		else {

			if (n > max) {
				max = n;
			}
			n = 1;
			simbolsuka = tx[i];
		}
	return max;
}


int main() //Основная функция 
{
	string stroka;
	getline(cin, stroka);
	cout << split(stroka);
	system("pause");
	return 0;
}
